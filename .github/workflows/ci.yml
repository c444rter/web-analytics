name: CI/CD Pipeline

on:
  push:
    branches: [ main, workspace ]
  pull_request:
    branches: [ main ]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Check for secrets in code
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check for vulnerable dependencies (Python)
      run: |
        pip install safety
        safety check -r requirements.txt
    
    - name: Check for vulnerable dependencies (Node.js)
      working-directory: ./frontend
      run: |
        npm install -g npm-audit-resolver
        npm audit --production

  backend-tests:
    runs-on: ubuntu-latest
    needs: security-checks
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: my_davids_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      supabase-mock:
        image: postgrest/postgrest
        env:
          PGRST_DB_URI: postgres://postgres:postgres@postgres:5432/my_davids_test
          PGRST_DB_SCHEMA: public
          PGRST_DB_ANON_ROLE: postgres
        ports:
          - 3000:3000
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/my_davids_test
        ALEMBIC_CONFIG: alembic.ini
      run: |
        alembic upgrade head
    
    - name: Run backend unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/my_davids_test
        SECRET_KEY: "test_secret_key"
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 0
        TESTING: "true"
        SUPABASE_URL: "http://localhost:3000"
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        BUCKET_NAME: "uploads"
      run: |
        pytest backend/tests/ --cov=backend --cov-report=xml
    
    - name: Run API integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/my_davids_test
        SECRET_KEY: "test_secret_key"
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 0
        TESTING: "true"
        SUPABASE_URL: "http://localhost:3000"
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        BUCKET_NAME: "uploads"
      run: |
        python -m pytest backend/tests/integration/ --cov=backend --cov-append
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  frontend-tests:
    runs-on: ubuntu-latest
    needs: security-checks
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend unit tests
      working-directory: ./frontend
      run: npm test -- --coverage
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build frontend for production
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_BACKEND_URL: "http://localhost:8000"
        NEXTAUTH_SECRET: "test-nextauth-secret"
        NEXTAUTH_URL: "http://localhost:3000"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        fail_ci_if_error: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: my_davids_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/my_davids_test
      run: |
        alembic upgrade head
    
    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/my_davids_test
        SECRET_KEY: "test_secret_key"
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 0
        TESTING: "true"
        SUPABASE_URL: "http://localhost:3000"
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        BUCKET_NAME: "uploads"
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 5  # Give the server time to start
    
    - name: Run end-to-end tests
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_BACKEND_URL: "http://localhost:8000"
        NEXTAUTH_SECRET: "test-nextauth-secret"
        NEXTAUTH_URL: "http://localhost:3000"
      run: |
        npm run test:e2e

  build-and-push:
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/web-analytics-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/web-analytics-backend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/web-analytics-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/web-analytics-backend:buildcache,mode=max
    
    - name: Build and push worker
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/web-analytics-worker:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/web-analytics-worker:${{ github.sha }}
        build-args: |
          WORKER=true
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/web-analytics-worker:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/web-analytics-worker:buildcache,mode=max

  deploy-railway:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
    
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Deploy all services
        railway up --detach
        
        # Wait for deployment to complete
        sleep 30
        
        # Explicitly redeploy the worker service to ensure it's updated
        railway service restart worker

  deploy-vercel:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Deploy to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        cd frontend
        vercel pull --yes --environment=production --token=$VERCEL_TOKEN
        vercel build --prod --token=$VERCEL_TOKEN
        vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN

  post-deployment-verification:
    needs: [deploy-railway, deploy-vercel]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Check backend health
      run: |
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
    
    - name: Check frontend
      run: |
        curl -f ${{ secrets.FRONTEND_URL }} || exit 1
    
    - name: Notify deployment success
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_TITLE: Production Deployment Successful
        SLACK_MESSAGE: 'Web Analytics app has been deployed to production successfully!'
